import type { Metadata } from 'next'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'
import { Providers } from './providers'
import ThemeInitializer from '@/components/ThemeInitializer'
import PublicChrome from '@/components/PublicChrome'
import { RequestsProvider } from '@/contexts/RequestsContext'
import { DownloadsProvider } from '@/contexts/DownloadsContext'
import { Toaster } from 'react-hot-toast'

const geistSans = Geist({ variable: '--font-geist-sans', subsets: ['latin'] })
const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})

export const metadata: Metadata = {
  title: 'secure systems',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang='en'>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              try {
                const storedTheme = localStorage.getItem('secure-shield-theme');
                const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                const theme = storedTheme || (prefersDark ? 'dark' : 'dark'); // Force dark
                document.documentElement.classList.toggle('dark', theme === 'dark');
                if (!storedTheme) localStorage.setItem('secure-shield-theme', 'dark');
              } catch (e) {}
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ThemeInitializer />
        <Providers>
          <RequestsProvider>
            {' '}
            {/* Wrap with RequestsProvider */}
            <PublicChrome>
              <DownloadsProvider>
                {children}
                <Toaster
                  position='top-center'
                  toastOptions={{
                    success: {
                      style: {
                        background: '#0f172a',
                        color: '#00E0FF',
                        border: '1px solid #00E0FF',
                        borderRadius: '10px',
                      },
                    },
                    error: {
                      style: {
                        background: '#1c1917',
                        color: '#ff4444',
                        border: '1px solid #ff4444',
                        borderRadius: '10px',
                      },
                    },
                  }}
                />
              </DownloadsProvider>
            </PublicChrome>
          </RequestsProvider>
        </Providers>
      </body>
    </html>
  )
}
